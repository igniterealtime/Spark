<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<project name="flashing" default="jar" basedir="..">

    <property name="plug.dir" value="${basedir}"/>
    <property name="plug.lib.dir" value="${plug.dir}/build/lib"/>
	
	<property name="classes.dir" value="${basedir}/build/classes"/>

    <property name="src.dir" value="${plug.dir}/src"/>
    <property name="java.dir" value="${src.dir}/java"/>
    <property name="resources.dir" value="resources"/>
    <property name="target.dir" value="${plug.dir}/target"/>
    <property name="target.lib.dir" value="${plug.dir}/target/lib"/>
    <property name="jar.file" value="${target.dir}/lib/plugin-classes.jar"/>
	
    <property name="spark.home" value="../../../"/>
    <property name="spark.libs.dir" value="${spark.home}/target/build/lib"/>

    <path id="lib.classpath">
        <fileset dir="${spark.libs.dir}" includes="**/*.jar, **/*.zip"/>
        <fileset dir="${spark.home}/build/lib/dist" includes="**/*.jar, **/*.zip"/>
        <fileset dir="${spark.home}/build/lib/dist/windows" includes="**/*.jar"/>
    </path>

	<!-- clean =================================================================================== -->
	<target name="clean" description="Cleans all build related output">
		<delete file="${jar.file}"/>
		<delete dir="${classes.dir}"/>
		<delete dir="${target.dir}"/>
	</target>	

	<!-- jni-compile =================================================================================== -->
	<target name="jni-compile">
		<mkdir dir="${target.dir}"/>

		<javac srcdir="src/java"
	        destdir="${target.dir}"
	        classpathref="lib.classpath"
	        source="1.8"
	        debug="true"
	        target="1.8"/>
		
		<javah destdir="src/c" class="org.jivesoftware.spark.plugin.flashing.FlashWindow" classpath="${target.dir}"/>
	</target>
	
	<!-- compile =================================================================================== -->
    <target name="compile" description="Compiles plugin source">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${java.dir}"
               destdir="${classes.dir}"
               classpathref="lib.classpath"
               source="1.8"
               debug="true"
               target="1.8"/>
    	 <copy todir="${classes.dir}">
    	            <fileset dir="${src.dir}" includes="**/*.png"/>
    	            <fileset dir="${src.dir}" includes="**/*.gif"/>
    	            <fileset dir="${src.dir}" includes="**/*.jpg"/>
    	            <fileset dir="${src.dir}" includes="**/*.jpeg"/>
    	            <fileset dir="${src.dir}" includes="**/*.wav"/>
    	            <fileset dir="${src.dir}" includes="**/*.properties"/>
		</copy>
    </target>

    <!-- resources =================================================================================== -->
    <target name="resources">
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}">
                <include name="**/*"/>
            </fileset>
            <fileset dir="${src.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>
	
	<!-- jar =================================================================================== -->
    <target name="jar" depends="clean,compile,resources" description="Makes a plugin jar">
        <mkdir dir="${target.dir}"/>
        <mkdir dir="${target.lib.dir}"/>

        <copy todir="${target.lib.dir}">
            <fileset file="${plug.lib.dir}/*.*"/>
        </copy>

        <copy todir="${target.dir}">
            <fileset file="${plug.dir}/plugin.xml"/>
        </copy>

        <copy todir="${target.dir}">
            <fileset dir="${plug.dir}">
                <include name="**/*.html"/>
                <include name="**/*.txt"/>
            </fileset>
        </copy>

        <jar basedir="${classes.dir}" file="${jar.file}" update="false"/>

        <jar file="${target.dir}/flashing.jar" basedir="${target.dir}" />

        <copy todir="${spark.home}/src/commercial">
            <fileset file="${target.dir}/flashing.jar"/>
        </copy>

    </target>
</project>
